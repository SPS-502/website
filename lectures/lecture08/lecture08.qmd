---
title: "Sampling"
subtitle: "SPS 502"
format: 
  revealjs:
    theme: [simple]
---

## Defining the Population



### Population
::: {.fragment}
-   A collection of things (examples?)
:::


### Population paramater


::: {.fragment}
-   Something we want to know about the population (examples?)
:::


## Counting the Population


### Census



::: {.fragment}
-   Count every single thing in the whole population
:::


### Sample



::: {.fragment}
-   Select parts of the population and count those
:::

## Measure the Sample

### Sample statistic or point

::: {.fragment}

-   The population parameter, but for the sample
    -   Uses the hat sign

$p$ $\hat{p}$
:::

## Is the Sample Good?

### Representativeness

::: {.fragment}
-   Does the sample look like the population?
:::

### Bias and randomness 
::: {.fragment}
-   Does every part of the population have the same chance of being
    sampled? 
:::

### Generalizability 

::: {.fragment}
-   Is $\hat{p}$ a good guess of $p$?
:::

## Sampling is a powerful tool

-   Sampling gets us accurate estimates of population parameter, even if
    the sample is small. 
-   Why? 
    
## Central Limit Theorem 

```{r include = F}
library(ggplot2)
library(dplyr)
library(forcats)
library(moderndive)

data(gss_cat)
glimpse(gss_cat)
```


```{r include = F}
gss_14 <- gss_cat %>% 
  filter(year == 2014) %>% 
  select(marital)
```

```{r include = F}
n50_1000rep <- gss_14 %>% 
  rep_sample_n(size = 50, reps = 1000)

p_hat_n50_1000rep <- n50_1000rep %>% 
  group_by(replicate) %>% 
  summarize(divorce_count = sum(marital == "Divorced"), 
            n = n()) %>% 
  mutate(p_hat = divorce_count / n)


n15_1000rep <- gss_14 %>% 
  rep_sample_n(size = 15, reps = 1000)


p_hat_n15_1000rep <- n15_1000rep %>% 
  group_by(replicate) %>% 
  summarize(divorce_count = sum(marital == "Divorced"), 
            n = n()) %>% 
  mutate(p_hat = divorce_count / n)


n600_1000rep <- gss_14 %>% 
  rep_sample_n(size = 600, reps = 1000)


p_hat_n600_1000rep <- n600_1000rep %>% 
  group_by(replicate) %>% 
  summarize(n = n(), 
            divorce_count = sum(marital == "Divorced")) %>% 
  mutate(p_hat = divorce_count / n)
```


```{r include = F}
p_hat_n15_1000rep <-  p_hat_n15_1000rep %>% mutate(sample_size = "15")
p_hat_n50_1000rep <-  p_hat_n50_1000rep %>% mutate(sample_size = "50")
p_hat_n600_1000rep <-  p_hat_n600_1000rep %>% mutate(sample_size = "600")

all_dat <- rbind(p_hat_n15_1000rep, p_hat_n50_1000rep, p_hat_n600_1000rep)
```

```{r echo=F, fig.height=6, fig.width=11, fig.cap= "True population proportion p is shown by vertical red line"}
ggplot(data = all_dat, aes(x = p_hat, fill = sample_size)) + 
  geom_histogram(data = subset(all_dat, sample_size == "15"), 
                 binwidth = 0.08, color = "black") + 
  geom_histogram(data = subset(all_dat, sample_size == "50"), 
                 binwidth = 0.04, color = "black") +
  geom_histogram(data = subset(all_dat, sample_size == "600"), 
                 binwidth = 0.02, color = "black") + 
  facet_wrap(~ sample_size, ncol = 1)  + 
  labs(x = "Sample proportion of divorced respondents",
       title = expression("Sampling distribution of "*hat(p)* 
                            " under three different sample sizes"),
       fill = "Sample size n:") + 
  geom_vline(data = NULL, xintercept = 0.16, color = "red", lwd = 1.5) +
  scale_x_continuous(breaks = seq(from = 0, to = 0.6, by = 0.05)) +
  scale_fill_brewer(palette = "Set2")

```
